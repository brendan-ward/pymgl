name: Build wheels

on:
  push:
    paths:
      - ".github/workflows/build_wheels.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "setup.py"
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    paths:
      - ".github/workflows/build_wheels.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "setup.py"
  workflow_dispatch:

env:
  BUILD_TEMP_DIR: "build"
  CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux_2_24_x86_64
  CIBW_SKIP: "cp36-* cp37-*, p* *musllinux*"
  CIBW_ARCHS: "auto64"
  CIBW_BUILD_VERBOSITY: 3

jobs:
  build-wheels-linux:
    name: Build wheels for Linux
    runs-on: "ubuntu-20.04"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init
          cd vendor/maplibre-gl-native && \
            git submodule update --init --recursive \
              vendor/earcut.hpp \
              vendor/polylabel \
              vendor/protozero \
              vendor/wagyu \
              vendor/unique_resource \
              vendor/boost \
              vendor/eternal \
              vendor/googletest \
              vendor/mapbox-base \
              vendor/vector-tile

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_BEFORE_ALL_LINUX: >
            apt-get update && \
            apt-get -y install curl \
              build-essential \
              cmake \
              ninja-build \
              pkg-config \
              libcurl4-openssl-dev \
              libicu-dev \
              libturbojpeg0-dev \
              libpng-dev \
              libprotobuf-dev \
              libuv1-dev \
              libx11-dev \
              libegl1-mesa-dev \
              libgl1-mesa-dev \
              xvfb

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build-wheels-macos:
    name: Build wheels for ${{ matrix.os }} ${{ matrix.platform }}
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "macos-10.15"]
        platform: ["x86_64"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init
          cd vendor/maplibre-gl-native && \
            git submodule update --init --recursive \
              vendor/earcut.hpp \
              vendor/polylabel \
              vendor/protozero \
              vendor/wagyu \
              vendor/unique_resource \
              vendor/boost \
              vendor/eternal \
              vendor/googletest \
              vendor/mapbox-base \
              vendor/vector-tile

      - name: Install MacOS dependencies
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew install -f cmake ninja pkg-config curl

      - name: Cache build artifacts
        uses: actions/cache@v2
        id: pymgl
        with:
          path: ${{ env.BUILD_TEMP_DIR }}
          key: ${{ matrix.os }}-${{ matrix.platform }}-wheels

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CURL_INCLUDE_DIR: /usr/local/opt/curl/include
          CURL_LIBRARY: /usr/local/opt/curl/lib/libcurl.dylib

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  test-wheels:
    name: Test wheels on ${{ matrix.os }} ${{ matrix.platform }} (Python ${{ matrix.python-version }})
    needs: [build-wheels-linux, build-wheels-macos]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "macos-latest", "macos-10.15"]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "ci/requirements-wheel-test.txt"

      - name: Download wheels from artifacts
        uses: actions/download-artifact@v2
        with:
          path: wheelhouse

      - name: Install dependencies and pyogrio wheel
        shell: bash
        run: |
          python -m pip install --find-links wheelhouse/artifact pymgl
          python -m pip list

      - name: Run tests
        shell: bash
        run: |
          cd ..
          python -m pytest --pyargs pymgl.tests -v
