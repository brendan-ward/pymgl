name: Build wheels

on:
  push:
    paths:
      - ".github/workflows/build_wheels.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "setup.py"
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    paths:
      - ".github/workflows/build_wheels.yml"
      - "MANIFEST.in"
      - "pyproject.toml"
      - "setup.py"
  workflow_dispatch:

env:
  BUILD_TEMP_DIR: "build"
  MACOSX_DEPLOYMENT_TARGET: "12"
  CIBW_SKIP: "cp38-* cp39-* pp* *musllinux* *i686* *ppc64le* *s390x*"
  CIBW_ARCHS: "auto64"
  CIBW_MANYLINUX_X86_64_IMAGE: "pymgl-manylinux_2_28_x86_64:latest"
  CIBW_BUILD_VERBOSITY: 2

jobs:
  build-wheels-linux:
    name: Build wheels on linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout submodules
        run: |
          git submodule update --init
          cd vendor/nanobind && \
            git submodule update --init --recursive
          cd ../maplibre-native && \
            git submodule update --init --recursive \
              vendor/boost \
              vendor/cpp-httplib \
              vendor/earcut.hpp \
              vendor/eternal \
              vendor/googletest \
              vendor/polylabel \
              vendor/protozero \
              vendor/mapbox-base \
              vendor/unique_resource \
              vendor/unordered_dense \
              vendor/vector-tile \
              vendor/wagyu \
              vendor/zip-archive

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          buildkitd-flags: --debug

      - name: Build derived manylinux image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.manylinux_2_28_x86_64
          tags: pymgl-manylinux_2_28_x86_64:latest
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          BUILDKIT_PROGRESS: plain

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.0

      - uses: actions/upload-artifact@v4
        with:
          name: pymgl-wheel-manylinux_2_28-x86_64
          path: ./wheelhouse/*.whl
          compression-level: 0

  build-wheels-macos:
    name: Build wheels on MacOS
    runs-on: macos-14

    steps:
      - name: Install MacOS dependencies
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
        run: |
          brew install ccache ninja

      - name: Install python & dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh && \
          . $HOME/.cargo/env && \
          uv python install ${{ matrix.python-version }} && \
          uv venv .venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install versioneer[toml]==0.29 tomli setuptools

      - name: Prepare ccache
        run: ccache --clear --set-config cache_dir=~/.ccache

      - name: Cache ccache
        uses: actions/cache@v4
        env:
          cache-name: ccache-v1
        with:
          path: ~/.ccache
          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}
      - name: Clear ccache statistics
        run: |
          ccache --zero-stats --set-config cache_dir=~/.ccache
          ccache --max-size=2G --set-config cache_dir=~/.ccache
          ccache --show-stats --set-config cache_dir=~/.ccache

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout submodules
        run: |
          git submodule update --init
          cd vendor/nanobind && \
            git submodule update --init --recursive
          cd ../maplibre-native && \
            git submodule update --init --recursive \
              vendor/boost \
              vendor/cpp-httplib \
              vendor/earcut.hpp \
              vendor/eternal \
              vendor/googletest \
              vendor/polylabel \
              vendor/protozero \
              vendor/mapbox-base \
              vendor/unique_resource \
              vendor/unordered_dense \
              vendor/vector-tile \
              vendor/wagyu \
              vendor/zip-archive

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.0

      - uses: actions/upload-artifact@v4
        with:
          name: pymgl-wheel-macos-arm64
          path: ./wheelhouse/*.whl
          compression-level: 0

  test-wheels:
    name: TST ${{ matrix.os }} ${{ matrix.platform }} (Python ${{ matrix.python-version }})
    needs: [build-wheels-linux, build-wheels-macos]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-24.04"
          - "ubuntu-22.04"
          - "ubuntu-20.04"
          - "macos-14"
        include:
          - os: "ubuntu-24.04"
            platform: "x86_64"
            wheel: pymgl-wheel-ubuntu-24.04-x86_64
          - os: "ubuntu-22.04"
            platform: "x86_64"
            wheel: pymgl-wheel-ubuntu-22.04-x86_64
          - os: "ubuntu-20.04"
            platform: "x86_64"
            wheel: pymgl-wheel-ubuntu-20.04-x86_64
          - os: "macos-14"
            platform: "arm64"
            wheel: pymgl-wheel-macos-arm64

        python-version: ["3.10", "3.11", "3.12"]

    env:
      PLATFORM_OS: ${{ matrix.os }}
      LIBGL_ALWAYS_SOFTWARE: 1

    steps:
      - name: Download wheels from artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ matrix.wheel }}-${{ matrix.python-version }}
          path: wheelhouse
          merge-multiple: true

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install
          xvfb

      #     - name: Install Ubuntu 24.04 runtime dependencies
      #       if: matrix.os == 'ubuntu-24.04'
      #       run: |
      #         sudo apt-get update
      #         sudo apt-get -y install \
      #           libicu74 \
      #           libcurl4 \
      #           libjpeg-turbo8 \
      #           libpng16-16 \
      #           libwebp7 \
      #           libprotobuf32 \
      #           libuv1 \
      #           libx11-6 \
      #           libegl1 \
      #           libopengl0 \
      #           libgles2 \
      #           xvfb && \
      #           # upgrade Mesa packages
      #           sudo apt-get install -y software-properties-common && \
      #           sudo add-apt-repository -y ppa:kisak/kisak-mesa && \
      #           sudo apt-get update && \
      #           sudo apt-get install -y libglx-mesa0

      #     - name: Install Ubuntu 22.04 runtime dependencies
      #       if: matrix.os == 'ubuntu-22.04'
      #       run: |
      #         sudo apt-get update
      #         sudo apt-get -y install \
      #           libicu70 \
      #           libcurl4 \
      #           libjpeg-turbo8 \
      #           libpng16-16 \
      #           libwebp7 \
      #           libprotobuf23 \
      #           libuv1 \
      #           libx11-6 \
      #           libegl1 \
      #           libopengl0 \
      #           libgles2 \
      #           xvfb

      #     - name: Install Ubuntu 20.04 runtime dependencies
      #       if: matrix.os == 'ubuntu-20.04'
      #       run: |
      #         sudo apt-get install -y software-properties-common
      #         sudo add-apt-repository --update -y ppa:ubuntu-toolchain-r/test
      #         sudo apt-get update
      #         sudo apt-get -y install \
      #           libstdc++6 \
      #           libicu66 \
      #           libcurl4 \
      #           libjpeg-turbo8 \
      #           libpng16-16 \
      #           libwebp6 \
      #           libprotobuf17 \
      #           libuv1 \
      #           libx11-6 \
      #           libegl1 \
      #           libopengl0 \
      #           libgles2 \
      #           xvfb

      - name: Install python & dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh && \
          . $HOME/.cargo/env && \
          uv python install ${{ matrix.python-version }} && \
          uv venv .venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
          uv pip install pytest Pillow numpy pixelmatch python-dotenv

      - name: Install pymgl
        run: |
          uv pip install --no-cache --pre --no-index --find-links wheelhouse pymgl
          uv pip list

      - name: Test wheels on Linux
        if: runner.os == 'Linux'
        run: |
          xvfb-run -a --server-args="-screen 0 1024x768x24 -ac +render -noreset" pytest --pyargs pymgl -v

      - name: Test wheels on MacOS
        if: runner.os == 'macOS'
        run: |
          cd ..
          pytest --pyargs pymgl -v

  # # NOTE: publish is limited to MacOS wheels because Linux wheels are not accepted
  # # for only Ubuntu, must be manylinux
  # publish:
  #   name: Publish to GitHub / PyPI
  #   needs: [test-wheels]
  #   runs-on: ubuntu-latest
  #   # only publish on tags
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: pymgl-wheel-*
  #         path: wheelhouse
  #         merge-multiple: true

  #     # NOTE: MacOS wheel are the only ones that can be published to PyPI
  #     - name: Copy MacOS wheel
  #       run: |
  #         mkdir wheelhouse/dist
  #         cp wheelhouse/*macos*.whl wheelhouse/dist

  #     - name: Publish MacOS wheel to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}
  #         packages_dir: wheelhouse/dist/

  #     - name: Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         name: Version ${{ github.ref_name }}
  #         tag_name: ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         files: |
  #           ./wheelhouse/*
