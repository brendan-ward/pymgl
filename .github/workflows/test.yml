name: Run tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  BUILD_TEMP_DIR: "build"

jobs:
  test:
    name: Test on ${{ matrix.os }} ${{ matrix.platform }}  (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-24.04"
          - "ubuntu-22.04"
          - "ubuntu-20.04"
          - "macos-14"
          - "macos-12"
        include:
          - os: "ubuntu-24.04"
            platform: "x86_64"
          - os: "ubuntu-22.04"
            platform: "x86_64"
          - os: "ubuntu-20.04"
            platform: "x86_64"
          - os: "macos-14"
            platform: "arm64"
          - os: "macos-12"
            platform: "x86_64"

        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkout submodules
        run: |
          git submodule update --init
          cd vendor/maplibre-gl-native && \
            git submodule update --init --recursive \
              vendor/boost \
              vendor/cpp-httplib \
              vendor/earcut.hpp \
              vendor/eternal \
              vendor/googletest \
              vendor/polylabel \
              vendor/protozero \
              vendor/mapbox-base \
              vendor/unique_resource \
              vendor/vector-tile \
              vendor/wagyu \
              vendor/zip-archive
          cd ../nanobind && \
            git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get -y install \
            curl \
            build-essential \
            cmake \
            ccache \
            ninja-build \
            pkg-config \
            libcurl4-openssl-dev \
            libicu-dev \
            libturbojpeg0-dev \
            libpng-dev \
            libprotobuf-dev \
            libuv1-dev \
            libx11-dev \
            libegl-dev \
            libopengl-dev \
            xvfb
          /usr/sbin/update-ccache-symlinks

      - name: Install MacOS dependencies
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew install cmake ninja pkg-config ccache

      - name: Prepare ccache
        run: ccache --clear --set-config cache_dir=~/.ccache

      - name: Cache ccache
        uses: actions/cache@v3
        env:
          cache-name: ccache-v1
        with:
          path: ~/.ccache
          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}
          restore-keys: |
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}
            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}
      - name: Clear ccache statistics
        run: |
          ccache --zero-stats --set-config cache_dir=~/.ccache
          ccache --max-size=2G --set-config cache_dir=~/.ccache
          ccache --show-stats --set-config cache_dir=~/.ccache

      - name: Build package
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
        run: |
          sudo mkdir -p $BUILD_TEMP_DIR
          sudo chown -R $(id -u):$(id -g) $BUILD_TEMP_DIR
          pip install versioneer[toml]==0.28 tomli setuptools
          python setup.py develop

      - name: Install test deps
        run: python -m pip install pytest Pillow numpy pixelmatch python-dotenv

      - name: Run Linux tests
        if: runner.os == 'Linux'
        run: |
          xvfb-run -a --server-args="-screen 0 1024x768x24 -ac +render -noreset" \
            build/tests/pymgl_test
          xvfb-run -a --server-args="-screen 0 1024x768x24 -ac +render -noreset" \
            python -m pytest pymgl/tests

      - name: Run MacOS tests
        if: runner.os == 'macOS'
        run: |
          build/tests/pymgl_test
          python -m pytest pymgl/tests
